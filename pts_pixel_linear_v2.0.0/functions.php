<?php
/**
 * WARNING: Please do not edit this file in any way
 * load the theme function files
 * Slightly Modified Options Framework
 */
 
 // Default RSS feed links
add_theme_support( 'automatic-feed-links' );

// Default custom header
add_theme_support( 'custom-header' );

// Default custom backgrounds
add_theme_support( 'custom-background' );

// Woocommerce Support
add_theme_support( 'woocommerce' );

// Allow shortcodes in widget text
add_filter('widget_text', 'do_shortcode');

// Default Title Tag
add_theme_support( 'title-tag' );
 
 
require_once ('admin/index.php');

if ( ! function_exists('bi_get_data') ) {
	function bi_get_data($id, $fallback = false) {
		global $pixel_linear_options;
		global $smof_data;
		$smof_data = $pixel_linear_options;
		if ( $fallback == false ) $fallback = '';
		$output = ( isset($smof_data[$id]) && $smof_data[$id] !== '' ) ? $smof_data[$id] : $fallback;
		return $output;
	}
}


require_once( get_template_directory() .'/functions/functions.php' );
require_once( get_template_directory() .'/functions/hooks.php' );
require_once( get_template_directory() .'/functions/function-extras.php' );
require_once( get_template_directory() .'/functions/custom-css.php' );
require_once( get_template_directory() .'/functions/tracking.php' );
require_once( get_template_directory() .'/functions/comments-layout.php' );

// Functions needed for admin
require_once( get_template_directory() .'/functions/post-types/post-type-helpers.php' );
require_once( get_template_directory() .'/functions/post-types/register-post-types.php' );
require_once( get_template_directory() .'/functions/post-types/register-taxonomies.php' );


/************* METABOX ****************/
// Re-define meta box path and URL
//define( 'RWMB_URL', trailingslashit( get_stylesheet_directory_uri() . '/functions/meta-box' ) );
//define( 'RWMB_DIR', trailingslashit( get_template_directory() . '/functions/meta-box' ) );
// Include the meta box script
//require_once RWMB_DIR . 'meta-box.php';
//require_once RWMB_DIR . 'setup.php';




/************* CUSTOM METABOX ****************/

add_filter( 'cmb_meta_boxes', 'cmb_sample_metaboxes' );
/**
 * Define the metabox and field configurations.
 *
 * @param  array $meta_boxes
 * @return array
 */
function cmb_sample_metaboxes( array $meta_boxes ) {

	// Start with an underscore to hide fields from custom fields list
	$prefix = '_cmb_';

	/**
	 * Sample metabox to demonstrate each field type included
	 */
	$meta_boxes['test_metabox'] = array(
		'id'         => 'test_metabox',
		'title'      => __( 'Slider Options', 'azkaban_options' ),
		'pages'      => array( 'page', ), // Post type
		'context'    => 'normal',
		'priority'   => 'high',
		'show_names' => true, // Show field names on the left
		// 'cmb_styles' => true, // Enqueue the CMB stylesheet on the frontend
		'fields'     => array(
			array(
				'name' => __( 'Enable Slider', 'azkaban_options' ),
				'desc' => __( '<i>Tick Checkbox To Enable Slider On This Page</i>', 'azkaban_options' ),
				'id'   => $prefix . 'enable_disable_slider',
				'type' => 'checkbox',
			),
		),
	);


	return $meta_boxes;
}

add_action( 'init', 'cmb_initialize_cmb_meta_boxes', 9999 );
/**
 * Initialize the metabox class.
 */
function cmb_initialize_cmb_meta_boxes() {

	if ( ! class_exists( 'cmb_Meta_Box' ) )
		require_once 'cmb/init.php';

}
    /* My custome code */
/* function wpb_custom_new_menu() {
  register_nav_menu('my-custom-menu',__( 'My Custom Menu' ));
} */



/**
 * Add Redux Framework & extras
 */
require get_template_directory() . '/themeoptions/admin-init.php';


// Link to Widgets
require_once (TEMPLATEPATH . '/includes/widgets/widget_areas.php');
require_once (TEMPLATEPATH . '/includes/widgets/widget-video.php');
require_once (TEMPLATEPATH . '/includes/widgets/widget-facebook-fans.php');
require_once (TEMPLATEPATH . '/includes/widgets/widget-recent-posts.php');
require_once (TEMPLATEPATH . '/includes/widgets/widget-random-posts.php');
require_once (TEMPLATEPATH . '/includes/widgets/widget-flickr.php');
require_once (TEMPLATEPATH . '/includes/widgets/widget-googleMap.php');
require_once (TEMPLATEPATH . '/includes/widgets/widget-social-icons.php');
require_once (TEMPLATEPATH . '/includes/widgets/widget-twitter.php');
require_once (TEMPLATEPATH . '/includes/widgets/widget-ads.php');
require_once (TEMPLATEPATH . '/includes/widgets/widget-contacts.php');


add_action('init','of_options');

if (!function_exists('of_options')) {
      function of_options()
      {
        //Register sidebar options for blog/portfolio/woocommerce category/archive pages
        global $wp_registered_sidebars;
        $sidebar_options[] = 'None';
        for($i=0;$i<1;$i++){
            $sidebars = $wp_registered_sidebars;// sidebar_generator::get_sidebars();
            //var_dump($sidebars);
            if(is_array($sidebars) && !empty($sidebars)){
                foreach($sidebars as $sidebar){
                    $sidebar_options[] = $sidebar['name'];
                }
            }
            $sidebars = sidebar_generator::get_sidebars();
            if(is_array($sidebars) && !empty($sidebars)){
                foreach($sidebars as $key => $value){
                    $sidebar_options[] = $value;
                }
            }
        }
    }
}

if (!function_exists("SMOF2ReduxConvertValue")) {
	function SMOF2ReduxConvertValue($value, $type) {
	    switch ($type) {
			case "text":
				if (!is_array($value)) {
					$value = stripcslashes($value); // Not sure why this happens. Huh.
				}
	    		break;
	    	case "typography":
				$default = array();
				if (isset($value["size"])) {
					$default["font-size"] = $value["size"];
					$px = filter_var($default["font-size"], FILTER_SANITIZE_NUMBER_INT);
					$default["units"] = str_replace($px, "", $default["font-size"]);
				}
				if (isset($value["color"])) {
					$default["color"] = $value["color"];
				}
				if (isset($value["face"])) {
					$fonts = array(
						"Arial, Helvetica, sans-serif",
						"'Arial Black', Gadget, sans-serif",
						"'Bookman Old Style', serif",
						"'Comic Sans MS', cursive",
						"Courier, monospace",
						"Garamond, serif",
						"Georgia, serif",
						"Impact, Charcoal, sans-serif",
						"'Lucida Console', Monaco, monospace",
						"'Lucida Sans Unicode', 'Lucida Grande', sans-serif",
						"'MS Sans Serif', Geneva, sans-serif",
						"'MS Serif', 'New York', sans-serif",
						"'Palatino Linotype', 'Book Antiqua', Palatino, serif",
						"Tahoma, Geneva, sans-serif",
						"'Times New Roman', Times, serif",
						"'Trebuchet MS', Helvetica, sans-serif",
						"Verdana, Geneva, sans-serif",
	                );
	                foreach($fonts as $font) {
	                	if (strpos(strtolower($font),strtolower($value["face"])) !== false) {
							$default["font-family"] = $font;
						}
	                }
				}
				if (isset($value["style"])) {
					if (strpos(strtolower($value["style"]),"bold") !== false) {
						$default["font-weight"] = "bold";
					}
					if (strpos(strtolower($value["style"]),"italic") !== false) {
						$default["font-style"] = "italic";
					}
				} 			
				$value = $default;
	    		break;
	    	case "border":
	    		if (isset($value["width"])) {
	    			$value["border-width"] = $value["width"]."px";
	    			$value["units"] = "px";
	    			unset($value["width"]);
	    		}
				if (isset($value["color"])) {
	    			$value["border-color"] = $value["color"];
	    			unset($value["color"]);
	    		}
				if (isset($value["style"])) {
	    			$value["border-style"] = $value["style"];
	    			unset($value["style"]);
	    		}
	    		break;			    			    			    			    		
	    	case "upload":
	    	case "image":
			case "media":
				$value = array("url"=>$value);
	    		break;    	
	    	default:
	    		break;
	    }
		return $value;
	}	
}